# -*- coding: utf-8 -*-
"""GenrePredictorFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1amnpt0kVliMYBCtGQ14eQRa8JQAXG1mr
"""

import numpy as np
import pandas as pd
import sklearn
import copy as cp
import matplotlib.pyplot as plt
from collections import Counter
from sklearn.metrics import classification_report
import seaborn as sns
from typing import Tuple
from sklearn import svm, metrics
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import plot_confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
df = pd.read_csv('/content/genres_v2.csv')

df.head()

genre = df.genre.tolist()
words = ['Dark Trap', 'Underground Rap', 'Trap Metal', 'Emo','Rap','RnB','Pop','Hiphop','techhouse','techno','trance','psytrance','trap','dnb','hardstyle']

l1 = []
count = 0
for item in genre:
    if item not in l1:
        count += 1
        l1.append(item)

print("There are:", count, "different genres")
print(pd.value_counts(np.array(genre)))



genre=genre=pd.get_dummies(genre)


from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['genre_encoded'] = le.fit_transform(df['genre'])
df.head()

X = df[['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',
       'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo',  'duration_ms',
       'time_signature']]

y = df[['genre_encoded']]

features = ['danceability', 'energy', 'key', 'loudness', 'mode', 'speechiness',
       'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo','duration_ms' ]
X.head()

y.head()

from sklearn.model_selection import train_test_split
X_train, X_test , y_train ,y_test = train_test_split(X,y,random_state =0)

accuracy = [['model','accuracy']]

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train,y_train)

cm = confusion_matrix(y_test, y_pred)
acc_score = accuracy_score(y_test, y_pred)
print(acc_score)





import numpy as np
import pandas as pd
import pretty_confusion_matrix

yhat = model.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
acc_score = accuracy_score(y_test, y_pred)
print(acc_score)

from sklearn.metrics import accuracy_score

accuracy.append(['LogisticRegression', accuracy_score(y_test , yhat, normalize =True)])
accuracy_score(y_test , yhat, normalize =True)
print(classification_report(y_test, yhat))

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(max_depth = 10 , random_state  = 0)
model.fit(X_train,y_train)

y_train.info()
y_test.info()

accuracy.append(['Random Forest',accuracy_score(y_test,yhat)])
accuracy_score(y_test,yhat)

from sklearn.svm import LinearSVC

clf = LinearSVC(random_state=0, tol=1e-5)
clf.fit(X_train, y_train) 
y_pred = clf.predict(X_test)

print(classification_report(y_test, y_pred))

accuracy_score(y_test,yhat)
cm = confusion_matrix(y_test, y_pred)
acc_score = accuracy_score(y_test, y_pred)
print(acc_score)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)

knn.score(X_train, y_train)

color = 'white'
matrix = plot_confusion_matrix(knn, X_test, y_pred, cmap=plt.cm.Blues)
matrix.ax_.set_title('Confusion Matrix', color=color)
plt.xlabel('Predicted Label', color=color)
plt.ylabel('True Label', color=color)
plt.gcf().axes[0].tick_params(colors=color)
plt.gcf().axes[1].tick_params(colors=color)
plt.show()



print(classification_report(y_test, y_pred))

accuracy.append(['SVM', accuracy_score(y_test,yhat)])
accuracy_score(y_test,yhat)

print(classification_report(y_test, yhat))

genre.info()

y=genre

y.head(5)

from sklearn import preprocessing
from sklearn import pipeline

poly = preprocessing.PolynomialFeatures(degree=30, include_bias=False)
scaler = preprocessing.StandardScaler()

from sklearn.preprocessing import OneHotEncoder
enc = OneHotEncoder()

enc

y = enc.fit_transform(df[["genre"]])

pd.DataFrame(y)





drop_data = df.drop(columns=['id','uri','track_href','analysis_url','song_name','title','Unnamed: 0','genre','type'])

drop_data.head()

from sklearn.model_selection import KFold
X = drop_data
kf = KFold(n_splits=5)
kf.get_n_splits(X)



